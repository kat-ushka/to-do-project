name: Release application

env:
  PROJECT_ID: ${{ secrets.GKE_DWK_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b

on:
  push:

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GKE_DWK_PROJECT }}
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          export_default_credentials: true
      - run: gcloud --quiet auth configure-docker
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - name: Build
        run: |-
          docker build \
            --file Dockerfile.api \
            --tag "gcr.io/$PROJECT_ID/to-do-api:$GITHUB_REF_NAME-$GITHUB_SHA" \
            .
          docker build \
            --file Dockerfile.web \
            --tag "gcr.io/$PROJECT_ID/to-do-web:$GITHUB_REF_NAME-$GITHUB_SHA" \
            .
          docker build \
            --file Dockerfile.db \
            --tag "gcr.io/$PROJECT_ID/to-do-db:$GITHUB_REF_NAME-$GITHUB_SHA" \
            .
          docker build \
            --file Dockerfile.daily \
            --tag "gcr.io/$PROJECT_ID/to-do-daily:$GITHUB_REF_NAME-$GITHUB_SHA" \
            .
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/to-do-api:$GITHUB_REF_NAME-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/to-do-web:$GITHUB_REF_NAME-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/to-do-db:$GITHUB_REF_NAME-$GITHUB_SHA"
          docker push "gcr.io/$PROJECT_ID/to-do-daily:$GITHUB_REF_NAME-$GITHUB_SHA"
      - name: Decrypt secret
        run: |-
          curl -O -L -C - https://github.com/mozilla/sops/releases/download/v3.7.3/sops-v3.7.3.linux
          sudo mv sops-v3.7.3.linux /usr/bin/sops
          sudo chmod +x /usr/bin/sops
          export SOPS_AGE_KEY=${{ secrets.GKE_DWK_SOPS_AGE_KEY }}
          sops --decrypt manifests/secret.enc.yaml > manifests/secret.yaml
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1
      - name: Install kubectl argo rollouts plugin
        run: |-
          curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x ./kubectl-argo-rollouts-linux-amd64
          sudo mv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts
      - name: Deploy
        run: |-
          kubectl create namespace $GITHUB_REF_NAME || true
          kubectl config set-context --current --namespace=$GITHUB_REF_NAME
          kustomize edit set namespace ${GITHUB_REF_NAME}
          kustomize edit set image to-do-api=gcr.io/$PROJECT_ID/to-do-api:$GITHUB_REF_NAME-$GITHUB_SHA
          kustomize edit set image to-do-web=gcr.io/$PROJECT_ID/to-do-web:$GITHUB_REF_NAME-$GITHUB_SHA
          kustomize edit set image to-do-db=gcr.io/$PROJECT_ID/to-do-db:$GITHUB_REF_NAME-$GITHUB_SHA
          kustomize edit set image to-do-daily=gcr.io/$PROJECT_ID/to-do-daily:$GITHUB_REF_NAME-$GITHUB_SHA
          sed -e "s|NAMESPACE|$GITHUB_REF_NAME|g" manifests/analysistemplate.yaml | kubectl apply -f -
          echo "kustomize build . | kubectl apply -f -"
          kustomize build . | kubectl apply -f -
          echo "kubectl rollout status statefulset to-do-db-statefulset"
          kubectl rollout status statefulset to-do-db-statefulset
          echo "kubectl-argo-rollouts status to-do-api-dep"
          kubectl-argo-rollouts status to-do-api-dep
          echo "kubectl-argo-rollouts status deployment to-do-web-dep"
          kubectl-argo-rollouts status deployment to-do-web-dep
          echo "kubectl get services -o wide"
          kubectl get services -o wide

